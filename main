#!/bin/bash


# _____                 _   _
#|  ___|   _ _ __   ___| |_(_) ___  _ __  ___
#| |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
#|  _|| |_| | | | | (__| |_| | (_) | | | \__ \
#|_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#

function checkFS   { [[ $(findmnt -T "${1}" -no fstype 2>&1) == ${2} ]] ;}
function checkZFS  { checkFS "${1}" zfs ;}
function getDevice { findmnt -T "${1}" -no source 2>&1 ;}

#    _
#   / \   _ __ __ _ ___
#  / _ \ | '__/ _` / __|
# / ___ \| | | (_| \__ \
#/_/   \_\_|  \__, |___/
#             |___/

while [ $# -gt 0 ]
do
  case "$(tr '[:upper:]' '[:lower:]'<<<$1)" in
    -reposbasedir|-repobasedir)
      reposBaseDir="$2"
      shift
    ;;
    *)
      if [ -z "${repoFile}" ]
      then
        repoFile="${1}"
        shift
        echo "Repofile set: ${repoFile}."
      else
        echo "Repo already set to ${repoFile}. Not sure what ${1} is."
        exit 1
      fi
    ;;
  esac
  shift
done

#  ____
# |  _ \ _ __ ___ _ __
# | |_) | '__/ _ \ '_ \
# |  __/| | |  __/ |_) |
# |_|   |_|  \___| .__/
#                |_|

if [ -z "${reposBaseDir}" ]
then
  reposBaseDir="/repo/mirror/upstream"
  echo "Using default repo base directory: ${reposBaseDir}"
fi

if [ -z "${repoFile}" ]
then
  echo "Need file.repo as argument for mirroring."
  exit 1
elif [ ! -f "${repoFile}" ]
then
  echo "$1 not found"
  exit 1
fi

hostDnfVars="$(python <<< $'import dnf\nfor k,v in dnf.dnf.Base().conf.substitutions.items(): print(k,v, sep="=")')"
eval $hostDnfVars
echo Set DNF host variables: $hostDnfVars

repoListToMirror="$(dnf repolist --setopt=reposdir='' -c "${repoFile}" | cut -d' ' -f1 | tail -n +2)"

if [ -z "$repoListToMirror" ]
then
  echo "No repos found in this file. Are any enabled?"
  exit 1 
fi

#  __  __       _
# |  \/  | __ _(_)_ __
# | |\/| |/ _` | | '_ \
# | |  | | (_| | | | | |
# |_|  |_|\__,_|_|_| |_|
#

for repo in $repoListToMirror
do
  echo "Starting on: $repo"

  # Take details from `dnf repoinfo` and store them in an assoc array for use.
  declare -A repoDetails
  while read detail 
  do
    key="$(cut -d':' -f1 <<< "${detail}" | tr -d ' ,-')"
    value="$(cut -d':' -f2- <<< "${detail}" | sed -E -e 's/( ?)\(.*\)//g' | sed -E -e 's/^ //g')"
    repoDetails[${key}]="${value}"
  done <<< "$(dnf repoinfo --setopt=reposdir='' -c "${repoFile}" ${repo})"

  if [ -n "${repoDetails[Repomirrors]}" ]
  then
    repoDetails[RepomirrorsVariables]="$(grep -Po '[a-z]+=[a-zA-Z_0-9-]+' <<< "${repoDetails[Repomirrors]}")"
    repoDetails[RepomirrorsListResolved]="$(curl -s "${repoDetails[Repomirrors]}")"

  elif [ -n "${repoDetails[Repometalink]}" ]
  then
    repoDetails[RepomirrorsVariables]="$(grep -Po '[a-z]+=[a-zA-Z_0-9-]+' <<< "${repoDetails[Repometalink]}")"
    repoDetails[RepomirrorsListResolved]="$(curl -s "${repoDetails[Repometalink]}")"

  elif [ -n "${repoDetails[Repobaseurl]}" ]
  then
    repoDetails[RepomirrorsListResolved]="${repoDetails[Repobaseurl]}"
  fi

  echo "${repoDetails[RepomirrorsListResolved]}"
  repoDetails[RepomirrorsBestFittingDirectoryStructure]="$(cut -d'/' -f4- <<< "${repoDetails[RepomirrorsListResolved]}" | sort -u | grep -vE '^(pub|linux)' | grep ^[a-z] | head -n1)"
  if [ -z "${repoDetails[RepomirrorsBestFittingDirectoryStructure]}" ]
  then
    echo "Couldn't determine best directory structure for repo $repo in file $repoFile"
    exit 1
  fi

  echo "Best fitting dir structure :${repoDetails[RepomirrorsBestFittingDirectoryStructure]}:"
  repoRipPath="${reposBaseDir}/${repoDetails[RepomirrorsBestFittingDirectoryStructure]}"
  expectedDatasetPath="$(cut -d'/' -f1,2 <<< "${repoDetails[RepomirrorsBestFittingDirectoryStructure]}")"

  if checkZFS "${repoRipPath}"
  then
    echo "This filesystem uses ZFS. Checking depth for ${expectedDatasetPath}"
    datasetChain=$(getDevice "${repoRipPath}")
    if [[ ${datasetChain} =~ ${repoRipPath}$ ]]
    then
      echo "Depth appropriate."
    else
      echo "Not deep enough: ${datasetChain}"
      echo "expected: ${expectedDatasetPath}"
      echo "Creating dataset."
      #zfs create -p ${datasetChain}/${expectedDatasetPath}
    fi
  fi

  echo "Syncing ${repo} to ${reposBaseDir}/${repoDetails[RepomirrorsBestFittingDirectoryStructure]}"
  echo ":${reposBaseDir}/${repoDetails[RepomirrorsBestFittingDirectoryStructure]}:"
  dnf reposync --setopt=reposdir='' -c "${repoFile}" \
    --download-metadata \
    --newest-only \
    --repoid=${repo} \
    --delete \
    --norepopath \
    -p "${reposBaseDir}/${repoDetails[RepomirrorsBestFittingDirectoryStructure]}"
  echo "-------------"
done
